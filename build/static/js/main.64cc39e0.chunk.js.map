{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","PatientPage/EntryCard.tsx","PatientPage/EntryMod.tsx","PatientPage/index.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","state/reducer.ts","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","initialState","patients","StateContext","createContext","StateProvider","_ref","reducer","children","_useReducer","useReducer","_useReducer2","Object","slicedToArray","state","dispatch","react_default","a","createElement","Provider","value","useStateValue","useContext","EntryCard","_entry$diagnosisCodes","entry","className","description","diagnosisCodes","map","code","i","key","EntryMod","_patients$id","_patients$id$entries","id","_useStateValue","entries","PatientPage_EntryCard","PatientPage","_patients$id2","_patients$id3","useParams","name","ssn","occupation","PatientPage_EntryMod","SelectField","label","options","Form","Field","formik_esm","as","option","TextField","_ref2","field","placeholder","assign","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","dateOfBirth","gender","validate","values","errors","isValid","dirty","component","FormField_SelectField","Grid","Column","floated","width","Button","type","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","concat","AddPatientModal_AddPatientForm","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","_useStateValue2","_React$useState","React","useState","_React$useState2","setModalOpen","_React$useState3","_React$useState4","setError","closeModal","undefined","submitNewPatient","asyncToGenerator","regenerator_default","mark","_callee","_yield$axios$post","newPatient","_e$response","_e$response2","_e$response2$data","wrap","_context","prev","next","axios","post","sent","data","payload","t0","console","response","stop","_x","apply","this","arguments","Container","textAlign","Table","celled","Row","HeaderCell","Body","patient","Cell","react_router_dom","to","components_HealthRatingBar","src_AddPatientModal","App","useEffect","get","_yield$axios$get","patientListFromApi","fetchPatientList","Link","primary","Divider","hidden","react_router","path","src_PatientPage","src_PatientListPage","ReactDOM","render","state_StateProvider","action","objectSpread2","reduce","memo","defineProperty","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.64cc39e0.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3,\n}\ninterface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\ninterface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave?: { startDate: string; endDate: string };\n}\n\ninterface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: { date: string; criteria: string };\n}\n\nexport type Entry =\n  | HealthCheckEntry\n  | OccupationalHealthcareEntry\n  | HospitalEntry;\nexport interface Patient {\n  id: string;\n  name: string;\n  ssn: string;\n  occupation: string;\n  gender: string;\n  dateOfBirth: string;\n  entries: Entry[];\n}\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n};\n\nconst initialState: State = {\n  patients: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { Entry } from '../types';\n\nconst EntryCard = ({ entry }: { entry: Entry }) => {\n  return (\n    <div className=\"entry-card\">\n      {entry.description}\n      <div>\n        {entry.diagnosisCodes?.map((code, i) => {\n          return <li key={i}>{code}</li>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EntryCard;\n","import React from 'react';\nimport { Entry } from '../types';\nimport EntryCard from './EntryCard';\nimport { useStateValue } from '../state';\nconst EntryMod = ({ id }: { id: string }) => {\n  const [{ patients }] = useStateValue();\n  return (\n    <div>\n      <h4>entries</h4>\n      <div>\n        {patients[id]?.entries?.map((entry: Entry) => {\n          return <EntryCard key={entry.id} entry={entry}></EntryCard>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default EntryMod;\n","import React from 'react';\nimport './style.css';\nimport { useStateValue } from '../state';\nimport { useParams } from 'react-router-dom';\nimport EntryMod from './EntryMod';\n\nconst PatientPage = () => {\n  const [{ patients }] = useStateValue();\n  interface IdParam {\n    id: string;\n  }\n  const { id } = useParams<IdParam>();\n\n  return (\n    <div>\n      <div>\n        <h2>{patients[id]?.name}</h2>\n      </div>\n      <div>ssn: {patients[id]?.ssn}</div>\n      <div>occupation: {patients[id]?.occupation}</div>\n      <EntryMod id={id}></EntryMod>\n    </div>\n  );\n};\n\nexport default PatientPage;\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField= ({\n  field,\n  label,\n  placeholder\n}: TextProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Table, Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue, addPatient } from '../state';\n\nconst PatientListPage = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response?.data || 'Unknown Error');\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>\n                {\n                  <Link to={`/patient/${patient.id}`}>\n                    <span>{patient.name}</span>\n                  </Link>\n                }\n              </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import { State } from './state';\nimport { Patient } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    };\n\nexport const setPatientList = (patientList: Patient[]): Action => {\n  return {\n    type: 'SET_PATIENT_LIST',\n    payload: patientList,\n  };\n};\nexport const addPatient = (patient: Patient): Action => {\n  return {\n    type: 'ADD_PATIENT',\n    payload: patient,\n  };\n};\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { useStateValue, setPatientList } from './state';\nimport { Patient } from './types';\nimport PatientPage from './PatientPage';\nimport PatientListPage from './PatientListPage';\n\nconst App = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    void axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patient/:id\">\n              <PatientPage />\n            </Route>\n            <Route path=\"/\">\n              <PatientListPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}