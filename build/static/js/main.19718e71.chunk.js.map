{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Gender","apiBaseUrl","initialState","patients","StateContext","createContext","StateProvider","_ref","reducer","children","_useReducer","useReducer","_useReducer2","Object","slicedToArray","state","dispatch","react_default","a","createElement","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","formik_esm","as","className","map","option","key","TextField","_ref2","field","placeholder","assign","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","FormField_SelectField","Grid","Column","floated","width","Button","type","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","concat","AddPatientModal_AddPatientForm","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","_useStateValue","_useStateValue2","_React$useState","React","useState","_React$useState2","setModalOpen","_React$useState3","_React$useState4","setError","closeModal","undefined","submitNewPatient","asyncToGenerator","regenerator_default","mark","_callee","_yield$axios$post","newPatient","_e$response","_e$response2","_e$response2$data","wrap","_context","prev","next","axios","post","sent","data","payload","t0","console","response","stop","_x","apply","this","arguments","Container","textAlign","Table","celled","Row","HeaderCell","Body","patient","id","Cell","components_HealthRatingBar","src_AddPatientModal","App","useEffect","get","_yield$axios$get","patientListFromApi","fetchPatientList","react_router_dom","Link","to","primary","Divider","hidden","react_router","path","src_PatientListPage","ReactDOM","render","state_StateProvider","action","objectSpread2","reduce","memo","defineProperty","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.19718e71.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n}\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n};\n\nconst initialState: State = {\n  patients: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField= ({\n  field,\n  label,\n  placeholder\n}: TextProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue } from \"../state\";\n\nconst PatientListPage = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response?.data || 'Unknown Error');\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>{patient.name}</Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue } from \"./state\";\nimport { Patient } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\n\nconst App = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    void axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/\">\n              <PatientListPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n","import { State } from \"./state\";\nimport { Patient } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}